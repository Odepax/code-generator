/**
 * Low level object that defines methods to generate source code.
 * It's main role is to take care of coding styles.
 * 
 * A code generator has to be extended and improved to show it's real value.
 * For instance, you should consider the implementation of an `openIfBrace` or
 * `openFunctionBrace` functions...
 *
 * @type {Object}
 */
var CodeGenerator = {
	
	/** @type {String} Stores the code generated by this code generator. */
	generatedCode: '',
	
	/** @type {String} Defines indent string to use for each indent level. */
	indentString: '\t',
	
	/** @type {String} Current indent string (all levels included). */
	currentIndentString: '',
	
	/** @type {Number} Current indent level. */
	currentIndentLevel: 0,

	/**
	 * Adds some text to the generated code.
	 *
	 * @param {String} text
	 * The text to be appended to the generated code. If not specified, just
	 * appends a blank line, without indentation.
	 * 
	 * @param {Boolean} onANewLine
	 * If TRUE (default), inserts an new line character (`\n`) and activates
	 * indent before adding text.
	 *
	 * @return {Object} Returns `this`.
	 */
	write: function(text, onANewLine) {
		if(typeof text == 'undefined') {
			this.generatedCode += '\n';
			return this;
		}

		if(typeof onANewLine == 'undefined')
			onANewLine = true;

		if(onANewLine)
			this.generatedCode += '\n' + this.currentIndentString;

		this.generatedCode += text;

		return this;
	},

	/**
	 * Increments current indent level. Resets current indent string.
	 *
	 * @return {Object} Returns `this`.
	 */
	indent: function() {
		++this.currentIndentLevel;

		this.currentIndentString = '';

		for(var i = 0; i < this.currentIndentLevel; ++i)
			this.currentIndentString += this.indentString;

		return this;
	},

	/**
	 * Decrements current indent level. Resets current indent string.
	 *
	 * @return {Object} Returns `this`.
	 */
	unindent: function() {
		--this.currentIndentLevel;

		this.currentIndentString = '';

		for(var i = 0; i < this.currentIndentLevel; ++i)
			this.currentIndentString += this.indentString;

		return this;
	}

};
